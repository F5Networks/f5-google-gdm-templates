# Copyright 2016 F5 Networks All rights reserved.
#
# Add copyright info here

"""Creates the virtual machine with environment variables and startup script."""

COMPUTE_URL_BASE = 'https://www.googleapis.com/compute/v1/'


def GenerateConfig(context):
  """Creates the virtual machine."""

  resources = [{
      'name': context.env['name'] + '-' + context.env['deployment'],
      'type': 'compute.v1.instance',
      'properties': {
          'zone': context.properties['zone'],
          'machineType': ''.join([COMPUTE_URL_BASE, 'projects/',
                                  context.env['project'], '/zones/',
                                  context.properties['zone'], '/machineTypes/',
                                  context.properties['machineType']]),
          'disks': [{
              'deviceName': 'boot',
              'type': 'PERSISTENT',
              'boot': True,
              'autoDelete': True,
              'initializeParams': {
                  'sourceImage': ''.join([COMPUTE_URL_BASE, 'projects/f5-networks-gce-dev',
                                          '/global/images/',
                                          context.properties['build'],
                                         ])
              }
          }],
          'networkInterfaces': [{
              'network': '$(ref.' + context.properties['network']
                         + '.selfLink)',
              'accessConfigs': [{
                  'name': 'External NAT',
                  'type': 'ONE_TO_ONE_NAT'
              }]
          }],
          'metadata': {
              'items': [{
                  'key': 'output',
                  'value': 'Testing',  
                  'key': 'startup-script',
                  'value': ''.join(['#!/bin/bash\n',
                                    'if [ -f /config/startupFinished ]; then\n',
                                    '    exit\n',
                                    'fi\n',
                                    'mkdir -p /config/cloud/gce\n',                                    
                                    'echo "#!/bin/bash" > /config/installCloudLibs.sh\n',
                                    'echo "echo \"about to execute\"" >> /config/installCloudLibs.sh\n',
                                    'echo "checks=0" >> /config/installCloudLibs.sh\n',
                                    'echo "while [ \$checks -lt 120 ]; do echo \"checking mcpd\"" >> /config/installCloudLibs.sh\n',
                                    'echo "    tmsh -a show sys mcp-state field-fmt | grep -q running" >> /config/installCloudLibs.sh\n',
                                    'echo "    if [ \$? == 0 ]; then" >> /config/installCloudLibs.sh\n',
                                    'echo "        echo mcpd ready" >> /config/installCloudLibs.sh\n',
                                    'echo "        break" >> /config/installCloudLibs.sh\n',
                                    'echo "    fi" >> /config/installCloudLibs.sh\n',
                                    'echo "    echo \"mcpd not ready yet\"" >> /config/installCloudLibs.sh\n',
                                    'echo "    let checks=checks+1" >> /config/installCloudLibs.sh\n',
                                    'echo "    sleep 10" >> /config/installCloudLibs.sh\n',
                                    'echo "done" >> /config/installCloudLibs.sh\n',
                                    'echo "echo \"loading sigcheck script\"" >> /config/installCloudLibs.sh\n',
                                    'echo "tmsh load sys config merge file /config/sigcheck" >>/config/installCloudLibs.sh\n',
                                    'echo "if [ \$? != 0 ]; then" >> /config/installCloudLibs.sh\n',
                                    'echo "    echo cannot validate signature of /config/sigcheck" >> /config/installCloudLibs.sh\n',
                                    'echo "    exit" >> /config/installCloudLibs.sh\n',
                                    'echo "fi" >> /config/installCloudLibs.sh\n',
                                    'echo "echo \"loaded sigcheck\"" >> /config/installCloudLibs.sh\n',
                                    'echo "echo \"verifying f5-cloud-libs.targ.gz\"" >> /config/installCloudLibs.sh\n',
                                    'echo "tmsh run cli script verifyHash /config/cloud/f5-cloud-libs.tar.gz" >> /config/installCloudLibs.sh\n',
                                    'echo "if [ \$? != 0 ]; then" >> /config/installCloudLibs.sh\n',
                                    'echo "    echo \"f5-cloud-libs.tar.gz does not match signature f5-coud-libs.tar.gz.f5sig\"" >> /config/installCloudLibs.sh\n',
                                    'echo "    exit" >> /config/installCloudLibs.sh\n',
                                    'echo "fi" >> /config/installCloudLibs.sh\n',
                                    'echo "echo \"verified f5-cloud-libs.tar.gz\"" >> /config/installCloudLibs.sh\n',
                                    'echo "echo \"expanding f5-cloud-libs.tar.gz\"" >> /config/installCloudLibs.sh\n',
                                    'echo "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/gce" >> /config/installCloudLibs.sh\n',
                                    'echo "cd /config/cloud/gce/f5-cloud-libs" >> /config/installCloudLibs.sh\n',
                                    'echo "touch /config/cloud/cloudLibsReady" >> /config/installCloudLibs.sh\n',
                                    'echo "cli script /Common/verifyHash {" > /config/sigcheck\n',
                                    'echo "    proc script::run {} {" >> /config/sigcheck\n',
                                    'echo "        if {[catch {" >> /config/sigcheck\n',
                                    'echo "            set file_path [lindex \$tmsh::argv 1]" >> /config/sigcheck\n',
                                    'echo "            set expected_hash f5c4206c0b093fb2f3a6e16409610ec0300b509dee9157b2c4801f99e41d08b1b1d2b6a3c75c6a509daee77c3103403aa4c8ae47c4b232a6ec76b4663017b11c" >> /config/sigcheck\n',
                                    'echo "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 \$file_path] 0]" >> /config/sigcheck\n',
                                    'echo "            if { \$expected_hash eq \$computed_hash } {" >> /config/sigcheck\n',
                                    'echo "                exit 0" >> /config/sigcheck\n',
                                    'echo "            }" >> /config/sigcheck\n',
                                    'echo "            tmsh::log err {Hash does not match}" >> /config/sigcheck\n',
                                    'echo "            exit 1" >> /config/sigcheck\n',
                                    'echo "        }]} {" >> /config/sigcheck\n',
                                    'echo "            tmsh::log err {Unexpected error in verifyHash}" >> /config/sigcheck\n',
                                    'echo "            exit 1" >> /config/sigcheck\n',
                                    'echo "        }" >> /config/sigcheck\n',
                                    'echo "    }" >> /config/sigcheck\n',
                                    'echo "    script-signature o4v4/Y2mV0cXV/eZefkq6wXlE5GCACYd6+HuN4ScfL/meD0Grw1aJxZGp9MAvv4Ik3IPIwS2n8WgvfG/cDKcwQHVMGFJN4kmN4tzhr9Zdf3879hKqJaqbLLkifDsYk8bX3ontvrqT7r7XKboBv2qygPaUrVZPtkxzbcAJ26ewIj9m+Rui2yp+uYskZAL0bAPi/g5KDTZvEz0rCtSSxOeVljk5lr6vA79HPCHfglCKucH1QnbcrGhpARcs+wiwCYC18yiKsOBl+BVRTQwXuQYs8RsNhCJ8bHQeM8dOHUZj5/1Exh0V6QOcqG8/6pMuSmXfduNKzmQQPyN+bO4ETQ03Q==" >> /config/sigcheck\n',
                                    'echo "}" >> /config/sigcheck\n',
                                    'echo "#!/bin/bash" > /config/waitThenRun.sh\n',
                                    'echo "while true; do echo \"waiting for cloud libs install to complete\"" >> /config/waitThenRun.sh\n',
                                    'echo "    if [ -f /config/cloud/cloudLibsReady ]; then" >> /config/waitThenRun.sh\n',
                                    'echo "        break" >> /config/waitThenRun.sh\n',
                                    'echo "    else" >> /config/waitThenRun.sh\n',
                                    'echo "        sleep 10" >> /config/waitThenRun.sh\n',
                                    'echo "    fi" >> /config/waitThenRun.sh\n',
                                    'echo "done" >> /config/waitThenRun.sh\n',
                                    'echo "\"\$@\"" >> /config/waitThenRun.sh\n',
                                    'echo "',
                                    context.properties['adminPassword'],
                                    '" > /config/cloud/gce/.adminPassword\n',
                                    'echo "#!/bin/bash" > /config/cloud/gce/createUser.sh\n',
                                    'echo "PASSWORD=\$(/bin/sed -e \$\'s:[\\\'\\\"{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g\' < /config/cloud/gce/.adminPassword)" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "if [ \"\$1\" = admin ]; then" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "    tmsh modify auth user \"\$1\" password \${PASSWORD}" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "else" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "    tmsh create auth user \"\$1\" password \${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "fi" >> /config/cloud/gce/createUser.sh\n',
                                    'echo "#!/bin/bash" > /config/cloud/gce/custom-config.sh\n',
                                    'echo "date" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "echo \\\"starting tmsh config\\\"" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh create ltm pool demo-pool members add { 10.0.0.3:80 } monitor http" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh create ltm policy uri-routing-policy controls add { forwarding } requires add { http } strategy first-match legacy" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh modify ltm policy uri-routing-policy rules add { service1.example.com { conditions add { 0 { http-uri host values { service1.example.com } } } actions add { 0 { forward select pool demo-pool } } ordinal 1 } }" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh modify ltm policy uri-routing-policy rules add { service2.example.com { conditions add { 0 { http-uri host values { service2.example.com } } } actions add { 0 { forward select pool demo-pool } } ordinal 2 } }" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh modify ltm policy uri-routing-policy rules add { apiv2 { conditions add { 0 { http-uri path starts-with values { /apiv2 } } } actions add { 0 { forward select pool demo-pool } } ordinal 3 } }" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh create ltm virtual /Common/demo-80 { destination 0.0.0.0:80 mask any ip-protocol tcp pool /Common/demo-pool policies replace-all-with { uri-routing-policy { } } profiles replace-all-with { tcp { } http { } }  source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled }" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "rm /config/cloud/gce/.adminPassword" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "tmsh save /sys config" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "date" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "### START CUSTOM TMSH CONFIGURTION" >> /config/cloud/gce/custom-config.sh\n',
                                    'echo "### END CUSTOM TMSH CONFIGURATION" >> /config/cloud/gce/custom-config.sh\n',                               
                                    'curl -o /config/cloud/f5-cloud-libs.tar.gz https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.0.1/dist/f5-cloud-libs.tar.gz\n',
                                    'chmod 755 /config/sigcheck\n',
                                    'chmod 755 /config/installCloudLibs.sh\n',
                                    'chmod 755 /config/waitThenRun.sh\n',
                                    'chmod 755 /config/cloud/gce/.adminPassword\n',
                                    'chmod 755 /config/cloud/gce/createUser.sh\n',
                                    'chmod 755 /config/cloud/gce/custom-config.sh\n',
                                    'nohup /config/installCloudLibs.sh > /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &\n',
                                    'nohup /config/waitThenRun.sh',
                                    ' f5-rest-node /config/cloud/gce/f5-cloud-libs/scripts/runScript.js',
                                    ' --signal ADMIN_CREATED',
                                    ' --file /config/cloud/gce/createUser.sh',
                                    ' --cl-args ',
                                    context.properties['adminUsername'],
                                    ' --log-level debug',
                                    ' -o /var/log/createUser.log',
                                    ' > /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &\n',
                                    'nohup /config/waitThenRun.sh',
                                    ' f5-rest-node /config/cloud/gce/f5-cloud-libs/scripts/onboard.js',
                                    ' --port 8443',
                                    ' --wait-for ADMIN_CREATED',
                                    ' -o /var/log/onboard.log',
                                    ' --log-level debug',
                                    ' --no-reboot',
                                    ' --host localhost',
                                    ' --user ',
                                    context.properties['adminUsername'],
                                    ' --password-url file:///config/cloud/gce/.adminPassword',
                                    ' --module ltm:nominal',
                                    ' --license ',
                                    context.properties['licKey1'],
                                    ' --ping',
                                    ' > /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &\n'
                                    'nohup /config/waitThenRun.sh',
                                    ' f5-rest-node /config/cloud/gce/f5-cloud-libs/scripts/runScript.js',
                                    ' --file /config/cloud/gce/custom-config.sh',
                                    ' --cwd /config/cloud/gce',
                                    ' -o /var/log/custom-config.log',
                                    ' --log-level debug',
                                    ' --wait-for ONBOARD_DONE',
                                    ' > /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &\n',
                                    'touch /config/startupFinished\n',
                                    ])
              }]
          }
      }
  }]
  return {'resources': resources}
 